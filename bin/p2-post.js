/**
 * Returns a list of tags for the P2 post.
 *
 * @param 	{string}	url
 *
 * @return 	{string[]}
 */
export function generateP2PostTags( url ) {
	const tag =
		't51w3c-' +
		url
			.toLowerCase()
			.replace( /^https?:\/\//i, '' )
			.replace( 'www.', '' )
			.replace( /\//g, '-' )
			.replace( /\./g, '-' )
			.replace( / /g, '-' )
			.replace( /[^\w-]+/g, '' )
			.replace( /-$/, '' );

	return [ 't51w3c', tag ];
}

/**
 * Generates the HTML for the WordPress P2 post.
 *
 * @param 	{object}	summary			Validator summary as generated by compileValidatorSummary().
 * @param 	{string[]}	validatedURLs	Array of URLs that were validated.
 *
 * @returns	{string}
 */
export function generateP2PostHtml( summary, validatedURLs ) {
	let htmlData = '';

	htmlData += `<p>The following URLs were inspected:</p>`;
	htmlData += `<ul class="t51-w3c-urls">`;
	htmlData += validatedURLs
		.map( ( item ) => `<li>${ item }</li>` )
		.join( '' );
	htmlData += `</ul>`;
	htmlData += `<p class="t51-w3c-summary">${ summary.error.count } errors and ${ summary.info.count } info warnings were encountered.</p>`;
	htmlData += '<h2>Errors</h2>';
	htmlData += '<details>';
	htmlData += `<summary class="t51-w3c-errors-summary">View ${ summary.error.count } errors</summary>`;
	htmlData += '<ul class="t51-w3c-errors-list">';
	Object.keys( summary.error.messages ).forEach( ( key, index ) => {
		const error_message = summary.error.messages[ key ];
		htmlData += `<li class="t51-w3c-error-item">
                        <span class="t51-w3c-error-item-count">${
							error_message.count
						}</span> findings for:
                        <span class="t51-w3c-error-item-msg">${ key }</span>
                        <ul class="t51-w3c-error-item-examples"><li><code style="font-size: 0.75rem;">${ encodeHtmlEntities(
							error_message.extracts[ 0 ]
						) }</code></li></ul>
                    </li>`;
	} );
	htmlData += '</ul>';
	htmlData += '</details>';

	htmlData += '<h2>Warnings/Info</h2>';
	htmlData += '<details>';
	htmlData += `<summary class="t51-w3c-warnings-summary">View ${ summary.info.count } warnings</summary>`;
	htmlData += '<ul class="t51-w3c-warnings-list">';
	Object.keys( summary.info.messages ).forEach( ( key ) => {
		htmlData += `<li class="t51-w3c-error-item">
                        <span class="t51-w3c-warning-item-count">${
							summary.info.messages[ key ].count
						}</span> findings for:
                        <span class="t51-w3c-warning-item-msg">${ key }</span>
                        <ul class="t51-w3c-warning-item-examples"><li><code style="font-size: 0.75rem;">${ encodeHtmlEntities(
							summary.info.messages[ key ].extracts[ 0 ]
						) }</code></li></ul>
                    </li>`;
	} );
	htmlData += '</ul>';
	htmlData += '</details>';

	return htmlData;
}

/**
 * Private function
 * Utility function to convert HTML tags in a way WP Editor will output correctly
 * @param {*} string
 * @returns
 */
const encodeHtmlEntities = ( string ) => {
	if ( ! string ) {
		return '';
	}
	return string
		.replace( /[\u00A0-\u9999<>\&]/g, ( i ) => {
			return '&#' + i.charCodeAt( 0 ) + ';';
		} )
		.trim()
		.replace( /\s+/g, ' ' )
		.replace( /\n/g, '<br />' );
};
